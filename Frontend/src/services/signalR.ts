import { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';
import type { GameState, Team } from '@/types/game';

export interface SignalRCallbacks {
  onGameStateChanged?: (gameState: GameState) => void;
  onAnswerRevealed?: (answerIndex: number) => void;
  onScoreUpdated?: (teams: Team[]) => void;
  onErrorsUpdated?: (teams: Team[]) => void;
  onRoundStarted?: () => void;
  onGameReset?: () => void;
}

export class SignalRService {
  private connection: HubConnection | null = null;
  private callbacks: SignalRCallbacks = {};

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SignalR Hub
   */
  async initialize(callbacks: SignalRCallbacks = {}): Promise<void> {
    this.callbacks = callbacks;

    this.connection = new HubConnectionBuilder()
      .withUrl('/gamehub')
      .configureLogging(LogLevel.Information)
      .withAutomaticReconnect()
      .build();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventHandlers();

    try {
      await this.connection.start();
      console.log('‚úÖ SignalR –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ
      await this.connection.invoke('JoinGame');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SignalR:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    if (!this.connection) return;

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    this.connection.on('GameStateChanged', (gameState: GameState) => {
      console.log('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–æ:', gameState);
      this.callbacks.onGameStateChanged?.(gameState);
    });

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞
    this.connection.on('AnswerRevealed', (answerIndex: number) => {
      console.log('üí° –û—Ç–∫—Ä—ã—Ç –æ—Ç–≤–µ—Ç:', answerIndex);
      this.callbacks.onAnswerRevealed?.(answerIndex);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    this.connection.on('ScoreUpdated', (teams: Team[]) => {
      console.log('üìä –°—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', teams);
      this.callbacks.onScoreUpdated?.(teams);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    this.connection.on('ErrorsUpdated', (teams: Team[]) => {
      console.log('‚ùå –û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', teams);
      this.callbacks.onErrorsUpdated?.(teams);
    });

    // –°—Ç–∞—Ä—Ç —Ä–∞—É–Ω–¥–∞
    this.connection.on('RoundStarted', () => {
      console.log('üöÄ –†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è');
      this.callbacks.onRoundStarted?.();
    });

    // –°–±—Ä–æ—Å –∏–≥—Ä—ã
    this.connection.on('GameReset', () => {
      console.log('üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
      this.callbacks.onGameReset?.();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.connection.onreconnected(() => {
      console.log('üîÑ SignalR –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
    });

    this.connection.onreconnecting(() => {
      console.log('‚è≥ SignalR –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
    });

    this.connection.onclose((error) => {
      console.log('üîå SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', error);
    });
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–±—ç–∫–∏
   */
  updateCallbacks(callbacks: SignalRCallbacks): void {
    this.callbacks = { ...this.callbacks, ...callbacks };
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç SignalR Hub
   */
  async disconnect(): Promise<void> {
    if (this.connection) {
      try {
        await this.connection.stop();
        console.log('üëã SignalR –æ—Ç–∫–ª—é—á–µ–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ SignalR:', error);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  get isConnected(): boolean {
    return this.connection?.state === 'Connected';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  get connectionState(): string {
    return this.connection?.state || 'Disconnected';
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const signalRService = new SignalRService();

export default signalRService;